<?php
namespace App\Http\Livewire\Frontend;

// phpcs:ignoreFile -- this fail is generated by Laravel
/**
 * SenaraiNomborPerolehanTable File.
 *
 * PHP Version 8.0
 *
 * @category SenaraiNomborPerolehanTable
 * @package  SenaraiNomborPerolehanTable
 * @author   Mimi Khalid <mimi@plisca.com.my>
 * @license  http://www.gnu.org/copyleft/gpl.html GNU General Public License
 * @link     https://www.plisca.com.my/
 */
use App\Domains\Auth\Models\User;
use Modules\Sisdant\Models\PermohonanNomborPerolehan;
use Modules\Sisdant\Models\MatrikIklan;
use App\Models\Pejabat;
use Modules\Sisdant\Models\JenisIklan;
use Illuminate\Database\Eloquent\Builder;
use Rappasoft\LaravelLivewireTables\DataTableComponent;
use Rappasoft\LaravelLivewireTables\Views\Column;
use Rappasoft\LaravelLivewireTables\Views\Filter;
use Carbon\Carbon;

// use Livewire\Component;
/**
 * Class SenaraiNomborPerolehanTable.
 *
 * @category SenaraiNomborPerolehanTable
 * @package  SenaraiNomborPerolehanTable
 * @author   Mimi Khalid <mimi@plisca.com.my>
 * @license  http://www.gnu.org/copyleft/gpl.html GNU General Public License
 * @link     https://www.plisca.com.my/
 */
class SenaraiNomborPerolehanTable extends DataTableComponent
{
    public string $defaultSortColumn = 'no_perolehan';
    public string $defaultSortDirection = 'desc';
    public string $emptyMessage = 'Tiada Data';
    public function columns(): array
    {
        return [
            Column::make(__('Bil'), 'id_perolehan')
                ->sortable(),
            Column::make(__('Bahagian'))
                ->sortable(function(Builder $query, $direction) {
                    return $query->orderBy(Pejabat::select('bahagian')->whereColumn('mohon_no_perolehan.section_id', 'pejabat.id'), $direction);
                }),
            Column::make(__('Tajuk'), 'no_perolehan')
                ->sortable(),
            Column::make(__('Nama Pemohon'))
                ->sortable(function(Builder $query, $direction) {
                    return $query->orderBy(User::select('name')->whereColumn('mohon_no_perolehan.user_id', 'users.id'), $direction);
                }),
            Column::make(__('Jenis Perolehan'))
                ->sortable(function(Builder $query, $direction) {
                    return $query->join('matrik_iklan', 'mohon_no_perolehan.matrik_iklan_id', '=', 'matrik_iklan.id')
                        ->orderBy(JenisIklan::select('nama')->whereColumn('matrik_iklan.jenis_iklan_id', 'jenis_iklan.id'), $direction);
                }),
            Column::make(__('Tahun Perolehan'), 'tahun_perolehan')
                ->sortable(),
            Column::make('Status'),
        ];
    }
    /**
     * Builder
     *
     * @return Builder
     */
    public function query(): Builder
    {
        $query = PermohonanNomborPerolehan::with('section', 'matrikIklan.jenisIklan', 'negeri', 'iklanPerolehan.statusIklan')
                ->join('users', 'mohon_no_perolehan.user_id', '=', 'users.id')->where('users.deleted_at', null)
                ->where('status', 'iklan')
                ->whereHas('users', fn($query) => $query
                    ->Where('deleted_at', null)
                    )
                ->whereHas('iklanPerolehan', fn($query) => $query
                    ->WhereIn('status_iklan_id', [2, 3, 4, 6])
                    );
        return $query
            ->when($this->getFilter('jenis_iklan'), fn($query, $tags) => $query
                ->whereHas('matrikIklan', fn($query) => $query
                    ->whereIn('jenis_iklan_id', $tags)))
            ->when($this->getFilter('search'), fn ($query, $term) => $query
                ->where('no_perolehan', 'ilike', '%'.$term.'%')
                ->orWhere('tajuk_perolehan', 'ilike', '%'.$term.'%')
                ->where('status', 'sah')
                ->whereHas('iklanPerolehan', fn($query) => $query
                    ->WhereIn('status_iklan_id', [2, 3, 4, 6])
                )
            );
    }

    /**
     * Filter jenis iklan
     *
     * @return array
     */
    public function filters(): array
    {
        return [
            'jenis_iklan' => Filter::make('JENIS PEROLEHAN')
                ->multiSelect(
                    JenisIklan::query()
                    ->orderBy('nama')
                    ->get()
                    ->keyBy('id')
                    ->map(fn($tag) => $tag->nama)
                    ->toArray()
                ),
        ];
    }

    public function rowView(): string
    {
        return 'livewire.frontend.senarai_perolehan';
    }
}
