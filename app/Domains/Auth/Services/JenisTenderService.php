<?php
// phpcs:ignoreFile -- this fail is generated by Laravel
namespace App\Domains\Auth\Services;

use App\Domains\Auth\Events\Iklan\JenisTenderCreated;
use App\Domains\Auth\Events\Iklan\JenisTenderUpdated;
use App\Domains\Auth\Events\Iklan\JenisTenderDeleted;
use Modules\Sisdant\Models\JenisTender;
use App\Exceptions\GeneralException;
use App\Services\BaseService;
use Exception;
use Illuminate\Support\Facades\DB;

/**
 * Class JenisTenderService.
 */
class JenisTenderService extends BaseService
{
    /**
     * JenisTenderService constructor.
     *
     * @param JenisTender $jenisTender
     */
    public function __construct(JenisTender $jenisTender)
    {
        $this->model = $jenisTender;
    }

    /**
     * @param  array $data
     * @return JenisTender
     *
     * @throws GeneralException
     * @throws \Throwable
     */
    public function store(array $data = []): JenisTender
    {
        DB::beginTransaction();

        try {
            $maxId = JenisTender::max('id');
            $jenisTender = $this->model::create(['id' => $maxId + 1, 'nama' => $data['nama']]);
        } catch (Exception $e) {
            DB::rollBack();

            throw new GeneralException(__('Sila cuba semula.'));
        }

        event(new JenisTenderCreated($jenisTender));

        activity('Tetapan')
        ->performedOn($jenisTender)
        ->log(':causer.name menambah jenis tender :subject.nama');

        DB::commit();

        return $jenisTender;
    }

    /**
     * @param  JenisTender  $jenisTender
     * @param  array $data
     *
     * @throws GeneralException
     * @throws \Throwable
     */
    public function update(JenisTender $jenisTender, array $data = []): JenisTender
    {
        DB::beginTransaction();

        try {
            $jenisTender->update(['nama' => $data['nama']]);
        } catch (Exception $e) {
            DB::rollBack();

            throw new GeneralException(__('Sila cuba semula'));
        }

        event(new JenisTenderUpdated($jenisTender));

        activity('Tetapan')
        ->performedOn($jenisTender)
        ->log(':causer.name mengemaskini jenis tender :subject.nama');

        DB::commit();

        return $jenisTender;
    }

    /**
     * @param  Jenis $jenisTender
     * @return bool
     *
     * @throws GeneralException
     */
    public function destroy(JenisTender $jenisTender): bool
    {
        if ($this->deleteById($jenisTender->id)) {
            event(new JenisTenderDeleted($jenisTender));

            return true;
        }

        throw new GeneralException(__('Sila cuba semula'));
    }
}
